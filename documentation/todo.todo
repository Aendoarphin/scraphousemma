JSX files for dashboard sections:
  ✔ dashboard/home @done(24-03-19 00:41)
    ✔ ui @done(24-03-18 17:06)
    ✔ interactivity @done(24-03-18 17:06)
    ✔ responsiveness @done(24-03-18 17:06)
  ✔ dashboard/news @done(24-03-02 22:15)
    ✔ ui @done(24-03-02 22:15)
    ✔ interactivity @done(24-02-27 21:05)
    ✔ responsiveness @done(24-02-27 21:04)
  dashboard/rankings
    ☐ ui
    ☐ interactivity
    ☐ responsiveness
  dashboard/schedule
    ☐ ui
    ☐ interactivity
    ☐ responsiveness

Set up centralized data:
  Create DashboardContext
    ☐ Create a new file named DashboardContext.js in the contexts directory of our project.
    ☐ Define a context to store data related to the dashboard section.
    ☐ Implement a DashboardProvider component to wrap the components within the dashboard section and provide data using the Context API.
  Fetch and Provide Data
    ☐ Within the DashboardProvider component, implement data fetching logic to retrieve necessary data for the dashboard section.
    ☐ Provide the fetched data to the wrapped components through the DashboardContext.
  Wrap Dashboard Components
    ☐ In the dashboard section (/pages/dashboard/index.jsx), import the DashboardProvider from DashboardContext.js.
    ☐ Wrap the components within the dashboard section (such as /news, /rankings, /schedule) with the DashboardProvider to enable access to the provided data.
  Access Data in Components
    ☐ In each component within the dashboard section (e.g., /app/dashboard/news/page.jsx), import and use the useDashboardContext hook from DashboardContext.js to access the provided data.
    ☐ Implement component logic based on the fetched data, ensuring seamless integration with the centralized data management system.